'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4200
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetTG"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetTG
    Inherits Global.System.Data.DataSet
    
    Private tableAORDER As AORDERDataTable
    
    Private tableAUSER As AUSERDataTable
    
    Private tableCINEMA As CINEMADataTable
    
    Private tableEVENT As EVENTDataTable
    
    Private tableHALL As HALLDataTable
    
    Private tableMOVIE As MOVIEDataTable
    
    Private tableSEAT As SEATDataTable
    
    Private tableSOTICKET As SOTICKETDataTable
    
    Private relationFK_AORDER_PLACES_AUSER As Global.System.Data.DataRelation
    
    Private relationFK_EVENT_IS_PLAYED_MOVIE As Global.System.Data.DataRelation
    
    Private relationFK_EVENT_TAKES_PLA_HALL As Global.System.Data.DataRelation
    
    Private relationFK_HALL_BELONGS_T_CINEMA As Global.System.Data.DataRelation
    
    Private relationFK_SEAT_CONSISTS__HALL As Global.System.Data.DataRelation
    
    Private relationFK_SOTICKET_CONTAINS_AORDER As Global.System.Data.DataRelation
    
    Private relationFK_SOTICKET_HAS_EVENT As Global.System.Data.DataRelation
    
    Private relationFK_SOTICKET_ON_SEAT As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AORDER")) Is Nothing) Then
                MyBase.Tables.Add(New AORDERDataTable(ds.Tables("AORDER")))
            End If
            If (Not (ds.Tables("AUSER")) Is Nothing) Then
                MyBase.Tables.Add(New AUSERDataTable(ds.Tables("AUSER")))
            End If
            If (Not (ds.Tables("CINEMA")) Is Nothing) Then
                MyBase.Tables.Add(New CINEMADataTable(ds.Tables("CINEMA")))
            End If
            If (Not (ds.Tables("EVENT")) Is Nothing) Then
                MyBase.Tables.Add(New EVENTDataTable(ds.Tables("EVENT")))
            End If
            If (Not (ds.Tables("HALL")) Is Nothing) Then
                MyBase.Tables.Add(New HALLDataTable(ds.Tables("HALL")))
            End If
            If (Not (ds.Tables("MOVIE")) Is Nothing) Then
                MyBase.Tables.Add(New MOVIEDataTable(ds.Tables("MOVIE")))
            End If
            If (Not (ds.Tables("SEAT")) Is Nothing) Then
                MyBase.Tables.Add(New SEATDataTable(ds.Tables("SEAT")))
            End If
            If (Not (ds.Tables("SOTICKET")) Is Nothing) Then
                MyBase.Tables.Add(New SOTICKETDataTable(ds.Tables("SOTICKET")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AORDER() As AORDERDataTable
        Get
            Return Me.tableAORDER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AUSER() As AUSERDataTable
        Get
            Return Me.tableAUSER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CINEMA() As CINEMADataTable
        Get
            Return Me.tableCINEMA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _EVENT() As EVENTDataTable
        Get
            Return Me.tableEVENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HALL() As HALLDataTable
        Get
            Return Me.tableHALL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MOVIE() As MOVIEDataTable
        Get
            Return Me.tableMOVIE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SEAT() As SEATDataTable
        Get
            Return Me.tableSEAT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SOTICKET() As SOTICKETDataTable
        Get
            Return Me.tableSOTICKET
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetTG = CType(MyBase.Clone,DataSetTG)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("AORDER")) Is Nothing) Then
                MyBase.Tables.Add(New AORDERDataTable(ds.Tables("AORDER")))
            End If
            If (Not (ds.Tables("AUSER")) Is Nothing) Then
                MyBase.Tables.Add(New AUSERDataTable(ds.Tables("AUSER")))
            End If
            If (Not (ds.Tables("CINEMA")) Is Nothing) Then
                MyBase.Tables.Add(New CINEMADataTable(ds.Tables("CINEMA")))
            End If
            If (Not (ds.Tables("EVENT")) Is Nothing) Then
                MyBase.Tables.Add(New EVENTDataTable(ds.Tables("EVENT")))
            End If
            If (Not (ds.Tables("HALL")) Is Nothing) Then
                MyBase.Tables.Add(New HALLDataTable(ds.Tables("HALL")))
            End If
            If (Not (ds.Tables("MOVIE")) Is Nothing) Then
                MyBase.Tables.Add(New MOVIEDataTable(ds.Tables("MOVIE")))
            End If
            If (Not (ds.Tables("SEAT")) Is Nothing) Then
                MyBase.Tables.Add(New SEATDataTable(ds.Tables("SEAT")))
            End If
            If (Not (ds.Tables("SOTICKET")) Is Nothing) Then
                MyBase.Tables.Add(New SOTICKETDataTable(ds.Tables("SOTICKET")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAORDER = CType(MyBase.Tables("AORDER"),AORDERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAORDER) Is Nothing) Then
                Me.tableAORDER.InitVars
            End If
        End If
        Me.tableAUSER = CType(MyBase.Tables("AUSER"),AUSERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAUSER) Is Nothing) Then
                Me.tableAUSER.InitVars
            End If
        End If
        Me.tableCINEMA = CType(MyBase.Tables("CINEMA"),CINEMADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCINEMA) Is Nothing) Then
                Me.tableCINEMA.InitVars
            End If
        End If
        Me.tableEVENT = CType(MyBase.Tables("EVENT"),EVENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEVENT) Is Nothing) Then
                Me.tableEVENT.InitVars
            End If
        End If
        Me.tableHALL = CType(MyBase.Tables("HALL"),HALLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHALL) Is Nothing) Then
                Me.tableHALL.InitVars
            End If
        End If
        Me.tableMOVIE = CType(MyBase.Tables("MOVIE"),MOVIEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMOVIE) Is Nothing) Then
                Me.tableMOVIE.InitVars
            End If
        End If
        Me.tableSEAT = CType(MyBase.Tables("SEAT"),SEATDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSEAT) Is Nothing) Then
                Me.tableSEAT.InitVars
            End If
        End If
        Me.tableSOTICKET = CType(MyBase.Tables("SOTICKET"),SOTICKETDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSOTICKET) Is Nothing) Then
                Me.tableSOTICKET.InitVars
            End If
        End If
        Me.relationFK_AORDER_PLACES_AUSER = Me.Relations("FK_AORDER_PLACES_AUSER")
        Me.relationFK_EVENT_IS_PLAYED_MOVIE = Me.Relations("FK_EVENT_IS_PLAYED_MOVIE")
        Me.relationFK_EVENT_TAKES_PLA_HALL = Me.Relations("FK_EVENT_TAKES_PLA_HALL")
        Me.relationFK_HALL_BELONGS_T_CINEMA = Me.Relations("FK_HALL_BELONGS_T_CINEMA")
        Me.relationFK_SEAT_CONSISTS__HALL = Me.Relations("FK_SEAT_CONSISTS__HALL")
        Me.relationFK_SOTICKET_CONTAINS_AORDER = Me.Relations("FK_SOTICKET_CONTAINS_AORDER")
        Me.relationFK_SOTICKET_HAS_EVENT = Me.Relations("FK_SOTICKET_HAS_EVENT")
        Me.relationFK_SOTICKET_ON_SEAT = Me.Relations("FK_SOTICKET_ON_SEAT")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetTG"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetTG.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAORDER = New AORDERDataTable
        MyBase.Tables.Add(Me.tableAORDER)
        Me.tableAUSER = New AUSERDataTable
        MyBase.Tables.Add(Me.tableAUSER)
        Me.tableCINEMA = New CINEMADataTable
        MyBase.Tables.Add(Me.tableCINEMA)
        Me.tableEVENT = New EVENTDataTable
        MyBase.Tables.Add(Me.tableEVENT)
        Me.tableHALL = New HALLDataTable
        MyBase.Tables.Add(Me.tableHALL)
        Me.tableMOVIE = New MOVIEDataTable
        MyBase.Tables.Add(Me.tableMOVIE)
        Me.tableSEAT = New SEATDataTable
        MyBase.Tables.Add(Me.tableSEAT)
        Me.tableSOTICKET = New SOTICKETDataTable
        MyBase.Tables.Add(Me.tableSOTICKET)
        Me.relationFK_AORDER_PLACES_AUSER = New Global.System.Data.DataRelation("FK_AORDER_PLACES_AUSER", New Global.System.Data.DataColumn() {Me.tableAUSER.USER_IDColumn}, New Global.System.Data.DataColumn() {Me.tableAORDER.USER_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_AORDER_PLACES_AUSER)
        Me.relationFK_EVENT_IS_PLAYED_MOVIE = New Global.System.Data.DataRelation("FK_EVENT_IS_PLAYED_MOVIE", New Global.System.Data.DataColumn() {Me.tableMOVIE.MOVIE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableEVENT.MOVIE_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_EVENT_IS_PLAYED_MOVIE)
        Me.relationFK_EVENT_TAKES_PLA_HALL = New Global.System.Data.DataRelation("FK_EVENT_TAKES_PLA_HALL", New Global.System.Data.DataColumn() {Me.tableHALL.CINEMA_IDColumn, Me.tableHALL.HALL_IDColumn}, New Global.System.Data.DataColumn() {Me.tableEVENT.CINEMA_IDColumn, Me.tableEVENT.HALL_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_EVENT_TAKES_PLA_HALL)
        Me.relationFK_HALL_BELONGS_T_CINEMA = New Global.System.Data.DataRelation("FK_HALL_BELONGS_T_CINEMA", New Global.System.Data.DataColumn() {Me.tableCINEMA.CINEMA_IDColumn}, New Global.System.Data.DataColumn() {Me.tableHALL.CINEMA_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_HALL_BELONGS_T_CINEMA)
        Me.relationFK_SEAT_CONSISTS__HALL = New Global.System.Data.DataRelation("FK_SEAT_CONSISTS__HALL", New Global.System.Data.DataColumn() {Me.tableHALL.CINEMA_IDColumn, Me.tableHALL.HALL_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSEAT.CINEMA_IDColumn, Me.tableSEAT.HALL_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_SEAT_CONSISTS__HALL)
        Me.relationFK_SOTICKET_CONTAINS_AORDER = New Global.System.Data.DataRelation("FK_SOTICKET_CONTAINS_AORDER", New Global.System.Data.DataColumn() {Me.tableAORDER.ORDER_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSOTICKET.ORDER_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_SOTICKET_CONTAINS_AORDER)
        Me.relationFK_SOTICKET_HAS_EVENT = New Global.System.Data.DataRelation("FK_SOTICKET_HAS_EVENT", New Global.System.Data.DataColumn() {Me.tableEVENT.EVENT_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSOTICKET.EVENT_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_SOTICKET_HAS_EVENT)
        Me.relationFK_SOTICKET_ON_SEAT = New Global.System.Data.DataRelation("FK_SOTICKET_ON_SEAT", New Global.System.Data.DataColumn() {Me.tableSEAT.CINEMA_IDColumn, Me.tableSEAT.HALL_IDColumn, Me.tableSEAT.AROWColumn, Me.tableSEAT.ANUMBERColumn}, New Global.System.Data.DataColumn() {Me.tableSOTICKET.CINEMA_IDColumn, Me.tableSOTICKET.HALL_IDColumn, Me.tableSOTICKET.AROWColumn, Me.tableSOTICKET.ANUMBERColumn}, false)
        Me.Relations.Add(Me.relationFK_SOTICKET_ON_SEAT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAORDER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAUSER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCINEMA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_EVENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHALL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMOVIE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSEAT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSOTICKET() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetTG = New DataSetTG
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub AORDERRowChangeEventHandler(ByVal sender As Object, ByVal e As AORDERRowChangeEvent)
    
    Public Delegate Sub AUSERRowChangeEventHandler(ByVal sender As Object, ByVal e As AUSERRowChangeEvent)
    
    Public Delegate Sub CINEMARowChangeEventHandler(ByVal sender As Object, ByVal e As CINEMARowChangeEvent)
    
    Public Delegate Sub EVENTRowChangeEventHandler(ByVal sender As Object, ByVal e As EVENTRowChangeEvent)
    
    Public Delegate Sub HALLRowChangeEventHandler(ByVal sender As Object, ByVal e As HALLRowChangeEvent)
    
    Public Delegate Sub MOVIERowChangeEventHandler(ByVal sender As Object, ByVal e As MOVIERowChangeEvent)
    
    Public Delegate Sub SEATRowChangeEventHandler(ByVal sender As Object, ByVal e As SEATRowChangeEvent)
    
    Public Delegate Sub SOTICKETRowChangeEventHandler(ByVal sender As Object, ByVal e As SOTICKETRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AORDERDataTable
        Inherits Global.System.Data.TypedTableBase(Of AORDERRow)
        
        Private columnCREATED As Global.System.Data.DataColumn
        
        Private columnORDER_ID As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AORDER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AORDERRow
            Get
                Return CType(Me.Rows(index),AORDERRow)
            End Get
        End Property
        
        Public Event AORDERRowChanging As AORDERRowChangeEventHandler
        
        Public Event AORDERRowChanged As AORDERRowChangeEventHandler
        
        Public Event AORDERRowDeleting As AORDERRowChangeEventHandler
        
        Public Event AORDERRowDeleted As AORDERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAORDERRow(ByVal row As AORDERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAORDERRow(ByVal CREATED As Date, ByVal ORDER_ID As Decimal, ByVal parentAUSERRowByFK_AORDER_PLACES_AUSER As AUSERRow, ByVal TOTAL As Decimal) As AORDERRow
            Dim rowAORDERRow As AORDERRow = CType(Me.NewRow,AORDERRow)
            Dim columnValuesArray() As Object = New Object() {CREATED, ORDER_ID, Nothing, TOTAL}
            If (Not (parentAUSERRowByFK_AORDER_PLACES_AUSER) Is Nothing) Then
                columnValuesArray(2) = parentAUSERRowByFK_AORDER_PLACES_AUSER(0)
            End If
            rowAORDERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAORDERRow)
            Return rowAORDERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByORDER_ID(ByVal ORDER_ID As Decimal) As AORDERRow
            Return CType(Me.Rows.Find(New Object() {ORDER_ID}),AORDERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AORDERDataTable = CType(MyBase.Clone,AORDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AORDERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCREATED = MyBase.Columns("CREATED")
            Me.columnORDER_ID = MyBase.Columns("ORDER_ID")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCREATED = New Global.System.Data.DataColumn("CREATED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED)
            Me.columnORDER_ID = New Global.System.Data.DataColumn("ORDER_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_ID)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnORDER_ID}, true))
            Me.columnCREATED.AllowDBNull = false
            Me.columnORDER_ID.AllowDBNull = false
            Me.columnORDER_ID.Unique = true
            Me.columnUSER_ID.AllowDBNull = false
            Me.columnUSER_ID.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAORDERRow() As AORDERRow
            Return CType(Me.NewRow,AORDERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AORDERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AORDERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AORDERRowChangedEvent) Is Nothing) Then
                RaiseEvent AORDERRowChanged(Me, New AORDERRowChangeEvent(CType(e.Row,AORDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AORDERRowChangingEvent) Is Nothing) Then
                RaiseEvent AORDERRowChanging(Me, New AORDERRowChangeEvent(CType(e.Row,AORDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AORDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent AORDERRowDeleted(Me, New AORDERRowChangeEvent(CType(e.Row,AORDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AORDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent AORDERRowDeleting(Me, New AORDERRowChangeEvent(CType(e.Row,AORDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAORDERRow(ByVal row As AORDERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AORDERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AUSERDataTable
        Inherits Global.System.Data.TypedTableBase(Of AUSERRow)
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnSURNAME As Global.System.Data.DataColumn
        
        Private columnEMAIL As Global.System.Data.DataColumn
        
        Private columnTEL As Global.System.Data.DataColumn
        
        Private columnADMIN As Global.System.Data.DataColumn
        
        Private columnPASSWORD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AUSER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SURNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSURNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADMINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADMIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PASSWORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASSWORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AUSERRow
            Get
                Return CType(Me.Rows(index),AUSERRow)
            End Get
        End Property
        
        Public Event AUSERRowChanging As AUSERRowChangeEventHandler
        
        Public Event AUSERRowChanged As AUSERRowChangeEventHandler
        
        Public Event AUSERRowDeleting As AUSERRowChangeEventHandler
        
        Public Event AUSERRowDeleted As AUSERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAUSERRow(ByVal row As AUSERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAUSERRow(ByVal USER_ID As String, ByVal NAME As String, ByVal SURNAME As String, ByVal EMAIL As String, ByVal TEL As String, ByVal ADMIN As String, ByVal PASSWORD() As Byte) As AUSERRow
            Dim rowAUSERRow As AUSERRow = CType(Me.NewRow,AUSERRow)
            Dim columnValuesArray() As Object = New Object() {USER_ID, NAME, SURNAME, EMAIL, TEL, ADMIN, PASSWORD}
            rowAUSERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAUSERRow)
            Return rowAUSERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUSER_ID(ByVal USER_ID As String) As AUSERRow
            Return CType(Me.Rows.Find(New Object() {USER_ID}),AUSERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AUSERDataTable = CType(MyBase.Clone,AUSERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AUSERDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnSURNAME = MyBase.Columns("SURNAME")
            Me.columnEMAIL = MyBase.Columns("EMAIL")
            Me.columnTEL = MyBase.Columns("TEL")
            Me.columnADMIN = MyBase.Columns("ADMIN")
            Me.columnPASSWORD = MyBase.Columns("PASSWORD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnSURNAME = New Global.System.Data.DataColumn("SURNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSURNAME)
            Me.columnEMAIL = New Global.System.Data.DataColumn("EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMAIL)
            Me.columnTEL = New Global.System.Data.DataColumn("TEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEL)
            Me.columnADMIN = New Global.System.Data.DataColumn("ADMIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADMIN)
            Me.columnPASSWORD = New Global.System.Data.DataColumn("PASSWORD", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASSWORD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUSER_ID}, true))
            Me.columnUSER_ID.AllowDBNull = false
            Me.columnUSER_ID.Unique = true
            Me.columnUSER_ID.MaxLength = 20
            Me.columnNAME.AllowDBNull = false
            Me.columnNAME.MaxLength = 50
            Me.columnSURNAME.AllowDBNull = false
            Me.columnSURNAME.MaxLength = 30
            Me.columnEMAIL.AllowDBNull = false
            Me.columnEMAIL.MaxLength = 30
            Me.columnTEL.MaxLength = 25
            Me.columnADMIN.AllowDBNull = false
            Me.columnADMIN.MaxLength = 1
            Me.columnPASSWORD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAUSERRow() As AUSERRow
            Return CType(Me.NewRow,AUSERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AUSERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AUSERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AUSERRowChangedEvent) Is Nothing) Then
                RaiseEvent AUSERRowChanged(Me, New AUSERRowChangeEvent(CType(e.Row,AUSERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AUSERRowChangingEvent) Is Nothing) Then
                RaiseEvent AUSERRowChanging(Me, New AUSERRowChangeEvent(CType(e.Row,AUSERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AUSERRowDeletedEvent) Is Nothing) Then
                RaiseEvent AUSERRowDeleted(Me, New AUSERRowChangeEvent(CType(e.Row,AUSERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AUSERRowDeletingEvent) Is Nothing) Then
                RaiseEvent AUSERRowDeleting(Me, New AUSERRowChangeEvent(CType(e.Row,AUSERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAUSERRow(ByVal row As AUSERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AUSERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CINEMADataTable
        Inherits Global.System.Data.TypedTableBase(Of CINEMARow)
        
        Private columnCINEMA_ID As Global.System.Data.DataColumn
        
        Private columnNAME As Global.System.Data.DataColumn
        
        Private columnCITY As Global.System.Data.DataColumn
        
        Private columnSTREET As Global.System.Data.DataColumn
        
        Private columnPRICE_ADULT As Global.System.Data.DataColumn
        
        Private columnPRICE_STUDENT As Global.System.Data.DataColumn
        
        Private columnPRICE_CHILD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CINEMA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CINEMA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCINEMA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STREETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTREET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICE_ADULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_ADULT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICE_STUDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_STUDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICE_CHILDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_CHILD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CINEMARow
            Get
                Return CType(Me.Rows(index),CINEMARow)
            End Get
        End Property
        
        Public Event CINEMARowChanging As CINEMARowChangeEventHandler
        
        Public Event CINEMARowChanged As CINEMARowChangeEventHandler
        
        Public Event CINEMARowDeleting As CINEMARowChangeEventHandler
        
        Public Event CINEMARowDeleted As CINEMARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCINEMARow(ByVal row As CINEMARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCINEMARow(ByVal CINEMA_ID As Decimal, ByVal NAME As String, ByVal CITY As String, ByVal STREET As String, ByVal PRICE_ADULT As Decimal, ByVal PRICE_STUDENT As Decimal, ByVal PRICE_CHILD As Decimal) As CINEMARow
            Dim rowCINEMARow As CINEMARow = CType(Me.NewRow,CINEMARow)
            Dim columnValuesArray() As Object = New Object() {CINEMA_ID, NAME, CITY, STREET, PRICE_ADULT, PRICE_STUDENT, PRICE_CHILD}
            rowCINEMARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCINEMARow)
            Return rowCINEMARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCINEMA_ID(ByVal CINEMA_ID As Decimal) As CINEMARow
            Return CType(Me.Rows.Find(New Object() {CINEMA_ID}),CINEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CINEMADataTable = CType(MyBase.Clone,CINEMADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CINEMADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCINEMA_ID = MyBase.Columns("CINEMA_ID")
            Me.columnNAME = MyBase.Columns("NAME")
            Me.columnCITY = MyBase.Columns("CITY")
            Me.columnSTREET = MyBase.Columns("STREET")
            Me.columnPRICE_ADULT = MyBase.Columns("PRICE_ADULT")
            Me.columnPRICE_STUDENT = MyBase.Columns("PRICE_STUDENT")
            Me.columnPRICE_CHILD = MyBase.Columns("PRICE_CHILD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCINEMA_ID = New Global.System.Data.DataColumn("CINEMA_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCINEMA_ID)
            Me.columnNAME = New Global.System.Data.DataColumn("NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAME)
            Me.columnCITY = New Global.System.Data.DataColumn("CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCITY)
            Me.columnSTREET = New Global.System.Data.DataColumn("STREET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTREET)
            Me.columnPRICE_ADULT = New Global.System.Data.DataColumn("PRICE_ADULT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_ADULT)
            Me.columnPRICE_STUDENT = New Global.System.Data.DataColumn("PRICE_STUDENT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_STUDENT)
            Me.columnPRICE_CHILD = New Global.System.Data.DataColumn("PRICE_CHILD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_CHILD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCINEMA_ID}, true))
            Me.columnCINEMA_ID.AllowDBNull = false
            Me.columnCINEMA_ID.Unique = true
            Me.columnNAME.AllowDBNull = false
            Me.columnNAME.MaxLength = 50
            Me.columnCITY.AllowDBNull = false
            Me.columnCITY.MaxLength = 25
            Me.columnSTREET.AllowDBNull = false
            Me.columnSTREET.MaxLength = 25
            Me.columnPRICE_ADULT.AllowDBNull = false
            Me.columnPRICE_STUDENT.AllowDBNull = false
            Me.columnPRICE_CHILD.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCINEMARow() As CINEMARow
            Return CType(Me.NewRow,CINEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CINEMARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CINEMARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CINEMARowChangedEvent) Is Nothing) Then
                RaiseEvent CINEMARowChanged(Me, New CINEMARowChangeEvent(CType(e.Row,CINEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CINEMARowChangingEvent) Is Nothing) Then
                RaiseEvent CINEMARowChanging(Me, New CINEMARowChangeEvent(CType(e.Row,CINEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CINEMARowDeletedEvent) Is Nothing) Then
                RaiseEvent CINEMARowDeleted(Me, New CINEMARowChangeEvent(CType(e.Row,CINEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CINEMARowDeletingEvent) Is Nothing) Then
                RaiseEvent CINEMARowDeleting(Me, New CINEMARowChangeEvent(CType(e.Row,CINEMARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCINEMARow(ByVal row As CINEMARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CINEMADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EVENTDataTable
        Inherits Global.System.Data.TypedTableBase(Of EVENTRow)
        
        Private columnADATE As Global.System.Data.DataColumn
        
        Private columnTIME As Global.System.Data.DataColumn
        
        Private columnEVENT_ID As Global.System.Data.DataColumn
        
        Private columnCINEMA_ID As Global.System.Data.DataColumn
        
        Private columnHALL_ID As Global.System.Data.DataColumn
        
        Private columnMOVIE_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EVENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ADATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EVENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEVENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CINEMA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCINEMA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HALL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHALL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVIE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOVIE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EVENTRow
            Get
                Return CType(Me.Rows(index),EVENTRow)
            End Get
        End Property
        
        Public Event EVENTRowChanging As EVENTRowChangeEventHandler
        
        Public Event EVENTRowChanged As EVENTRowChangeEventHandler
        
        Public Event EVENTRowDeleting As EVENTRowChangeEventHandler
        
        Public Event EVENTRowDeleted As EVENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEVENTRow(ByVal row As EVENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEVENTRow(ByVal ADATE As Date, ByVal TIME As String, ByVal EVENT_ID As Decimal, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal parentMOVIERowByFK_EVENT_IS_PLAYED_MOVIE As MOVIERow) As EVENTRow
            Dim rowEVENTRow As EVENTRow = CType(Me.NewRow,EVENTRow)
            Dim columnValuesArray() As Object = New Object() {ADATE, TIME, EVENT_ID, CINEMA_ID, HALL_ID, Nothing}
            If (Not (parentMOVIERowByFK_EVENT_IS_PLAYED_MOVIE) Is Nothing) Then
                columnValuesArray(5) = parentMOVIERowByFK_EVENT_IS_PLAYED_MOVIE(4)
            End If
            rowEVENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEVENTRow)
            Return rowEVENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEVENT_ID(ByVal EVENT_ID As Decimal) As EVENTRow
            Return CType(Me.Rows.Find(New Object() {EVENT_ID}),EVENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EVENTDataTable = CType(MyBase.Clone,EVENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EVENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnADATE = MyBase.Columns("ADATE")
            Me.columnTIME = MyBase.Columns("TIME")
            Me.columnEVENT_ID = MyBase.Columns("EVENT_ID")
            Me.columnCINEMA_ID = MyBase.Columns("CINEMA_ID")
            Me.columnHALL_ID = MyBase.Columns("HALL_ID")
            Me.columnMOVIE_ID = MyBase.Columns("MOVIE_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnADATE = New Global.System.Data.DataColumn("ADATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADATE)
            Me.columnTIME = New Global.System.Data.DataColumn("TIME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIME)
            Me.columnEVENT_ID = New Global.System.Data.DataColumn("EVENT_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEVENT_ID)
            Me.columnCINEMA_ID = New Global.System.Data.DataColumn("CINEMA_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCINEMA_ID)
            Me.columnHALL_ID = New Global.System.Data.DataColumn("HALL_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHALL_ID)
            Me.columnMOVIE_ID = New Global.System.Data.DataColumn("MOVIE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVIE_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEVENT_ID}, true))
            Me.columnADATE.AllowDBNull = false
            Me.columnTIME.AllowDBNull = false
            Me.columnTIME.MaxLength = 5
            Me.columnEVENT_ID.AllowDBNull = false
            Me.columnEVENT_ID.Unique = true
            Me.columnCINEMA_ID.AllowDBNull = false
            Me.columnHALL_ID.AllowDBNull = false
            Me.columnHALL_ID.MaxLength = 3
            Me.columnMOVIE_ID.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "EVENTRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "EVENTRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "EVENTRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "EVENTDataTable")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableEVENT")
            Me.ExtendedProperties.Add("Generator_UserTableName", "EVENT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEVENTRow() As EVENTRow
            Return CType(Me.NewRow,EVENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EVENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EVENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EVENTRowChangedEvent) Is Nothing) Then
                RaiseEvent EVENTRowChanged(Me, New EVENTRowChangeEvent(CType(e.Row,EVENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EVENTRowChangingEvent) Is Nothing) Then
                RaiseEvent EVENTRowChanging(Me, New EVENTRowChangeEvent(CType(e.Row,EVENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EVENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent EVENTRowDeleted(Me, New EVENTRowChangeEvent(CType(e.Row,EVENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EVENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent EVENTRowDeleting(Me, New EVENTRowChangeEvent(CType(e.Row,EVENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEVENTRow(ByVal row As EVENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EVENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HALLDataTable
        Inherits Global.System.Data.TypedTableBase(Of HALLRow)
        
        Private columnCINEMA_ID As Global.System.Data.DataColumn
        
        Private columnHALL_ID As Global.System.Data.DataColumn
        
        Private columnCAPACITY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "HALL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CINEMA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCINEMA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HALL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHALL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAPACITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAPACITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HALLRow
            Get
                Return CType(Me.Rows(index),HALLRow)
            End Get
        End Property
        
        Public Event HALLRowChanging As HALLRowChangeEventHandler
        
        Public Event HALLRowChanged As HALLRowChangeEventHandler
        
        Public Event HALLRowDeleting As HALLRowChangeEventHandler
        
        Public Event HALLRowDeleted As HALLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHALLRow(ByVal row As HALLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHALLRow(ByVal parentCINEMARowByFK_HALL_BELONGS_T_CINEMA As CINEMARow, ByVal HALL_ID As String, ByVal CAPACITY As Decimal) As HALLRow
            Dim rowHALLRow As HALLRow = CType(Me.NewRow,HALLRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, HALL_ID, CAPACITY}
            If (Not (parentCINEMARowByFK_HALL_BELONGS_T_CINEMA) Is Nothing) Then
                columnValuesArray(0) = parentCINEMARowByFK_HALL_BELONGS_T_CINEMA(0)
            End If
            rowHALLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHALLRow)
            Return rowHALLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCINEMA_IDHALL_ID(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String) As HALLRow
            Return CType(Me.Rows.Find(New Object() {CINEMA_ID, HALL_ID}),HALLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HALLDataTable = CType(MyBase.Clone,HALLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HALLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCINEMA_ID = MyBase.Columns("CINEMA_ID")
            Me.columnHALL_ID = MyBase.Columns("HALL_ID")
            Me.columnCAPACITY = MyBase.Columns("CAPACITY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCINEMA_ID = New Global.System.Data.DataColumn("CINEMA_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCINEMA_ID)
            Me.columnHALL_ID = New Global.System.Data.DataColumn("HALL_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHALL_ID)
            Me.columnCAPACITY = New Global.System.Data.DataColumn("CAPACITY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAPACITY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCINEMA_ID, Me.columnHALL_ID}, true))
            Me.columnCINEMA_ID.AllowDBNull = false
            Me.columnHALL_ID.AllowDBNull = false
            Me.columnHALL_ID.MaxLength = 3
            Me.columnCAPACITY.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHALLRow() As HALLRow
            Return CType(Me.NewRow,HALLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HALLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HALLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HALLRowChangedEvent) Is Nothing) Then
                RaiseEvent HALLRowChanged(Me, New HALLRowChangeEvent(CType(e.Row,HALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HALLRowChangingEvent) Is Nothing) Then
                RaiseEvent HALLRowChanging(Me, New HALLRowChangeEvent(CType(e.Row,HALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HALLRowDeletedEvent) Is Nothing) Then
                RaiseEvent HALLRowDeleted(Me, New HALLRowChangeEvent(CType(e.Row,HALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HALLRowDeletingEvent) Is Nothing) Then
                RaiseEvent HALLRowDeleting(Me, New HALLRowChangeEvent(CType(e.Row,HALLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHALLRow(ByVal row As HALLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HALLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MOVIEDataTable
        Inherits Global.System.Data.TypedTableBase(Of MOVIERow)
        
        Private columnLENGTH As Global.System.Data.DataColumn
        
        Private columnVERSION As Global.System.Data.DataColumn
        
        Private columnYEAR As Global.System.Data.DataColumn
        
        Private columnMOVIE_NAME As Global.System.Data.DataColumn
        
        Private columnMOVIE_ID As Global.System.Data.DataColumn
        
        Private columnPARENTS_GUIDE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MOVIE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VERSIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVERSION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVIE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOVIE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVIE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOVIE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PARENTS_GUIDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENTS_GUIDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MOVIERow
            Get
                Return CType(Me.Rows(index),MOVIERow)
            End Get
        End Property
        
        Public Event MOVIERowChanging As MOVIERowChangeEventHandler
        
        Public Event MOVIERowChanged As MOVIERowChangeEventHandler
        
        Public Event MOVIERowDeleting As MOVIERowChangeEventHandler
        
        Public Event MOVIERowDeleted As MOVIERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMOVIERow(ByVal row As MOVIERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMOVIERow(ByVal LENGTH As String, ByVal VERSION As String, ByVal YEAR As Decimal, ByVal MOVIE_NAME As String, ByVal MOVIE_ID As Decimal, ByVal PARENTS_GUIDE As String) As MOVIERow
            Dim rowMOVIERow As MOVIERow = CType(Me.NewRow,MOVIERow)
            Dim columnValuesArray() As Object = New Object() {LENGTH, VERSION, YEAR, MOVIE_NAME, MOVIE_ID, PARENTS_GUIDE}
            rowMOVIERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMOVIERow)
            Return rowMOVIERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMOVIE_ID(ByVal MOVIE_ID As Decimal) As MOVIERow
            Return CType(Me.Rows.Find(New Object() {MOVIE_ID}),MOVIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MOVIEDataTable = CType(MyBase.Clone,MOVIEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MOVIEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLENGTH = MyBase.Columns("LENGTH")
            Me.columnVERSION = MyBase.Columns("VERSION")
            Me.columnYEAR = MyBase.Columns("YEAR")
            Me.columnMOVIE_NAME = MyBase.Columns("MOVIE_NAME")
            Me.columnMOVIE_ID = MyBase.Columns("MOVIE_ID")
            Me.columnPARENTS_GUIDE = MyBase.Columns("PARENTS_GUIDE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLENGTH = New Global.System.Data.DataColumn("LENGTH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLENGTH)
            Me.columnVERSION = New Global.System.Data.DataColumn("VERSION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVERSION)
            Me.columnYEAR = New Global.System.Data.DataColumn("YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEAR)
            Me.columnMOVIE_NAME = New Global.System.Data.DataColumn("MOVIE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVIE_NAME)
            Me.columnMOVIE_ID = New Global.System.Data.DataColumn("MOVIE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVIE_ID)
            Me.columnPARENTS_GUIDE = New Global.System.Data.DataColumn("PARENTS_GUIDE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENTS_GUIDE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMOVIE_ID}, true))
            Me.columnLENGTH.AllowDBNull = false
            Me.columnLENGTH.MaxLength = 6
            Me.columnVERSION.AllowDBNull = false
            Me.columnVERSION.MaxLength = 10
            Me.columnYEAR.AllowDBNull = false
            Me.columnMOVIE_NAME.AllowDBNull = false
            Me.columnMOVIE_NAME.MaxLength = 25
            Me.columnMOVIE_ID.AllowDBNull = false
            Me.columnMOVIE_ID.Unique = true
            Me.columnPARENTS_GUIDE.AllowDBNull = false
            Me.columnPARENTS_GUIDE.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMOVIERow() As MOVIERow
            Return CType(Me.NewRow,MOVIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MOVIERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MOVIERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MOVIERowChangedEvent) Is Nothing) Then
                RaiseEvent MOVIERowChanged(Me, New MOVIERowChangeEvent(CType(e.Row,MOVIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MOVIERowChangingEvent) Is Nothing) Then
                RaiseEvent MOVIERowChanging(Me, New MOVIERowChangeEvent(CType(e.Row,MOVIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MOVIERowDeletedEvent) Is Nothing) Then
                RaiseEvent MOVIERowDeleted(Me, New MOVIERowChangeEvent(CType(e.Row,MOVIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MOVIERowDeletingEvent) Is Nothing) Then
                RaiseEvent MOVIERowDeleting(Me, New MOVIERowChangeEvent(CType(e.Row,MOVIERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMOVIERow(ByVal row As MOVIERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MOVIEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SEATDataTable
        Inherits Global.System.Data.TypedTableBase(Of SEATRow)
        
        Private columnCINEMA_ID As Global.System.Data.DataColumn
        
        Private columnHALL_ID As Global.System.Data.DataColumn
        
        Private columnAROW As Global.System.Data.DataColumn
        
        Private columnANUMBER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SEAT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CINEMA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCINEMA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HALL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHALL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AROWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAROW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SEATRow
            Get
                Return CType(Me.Rows(index),SEATRow)
            End Get
        End Property
        
        Public Event SEATRowChanging As SEATRowChangeEventHandler
        
        Public Event SEATRowChanged As SEATRowChangeEventHandler
        
        Public Event SEATRowDeleting As SEATRowChangeEventHandler
        
        Public Event SEATRowDeleted As SEATRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSEATRow(ByVal row As SEATRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSEATRow(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal) As SEATRow
            Dim rowSEATRow As SEATRow = CType(Me.NewRow,SEATRow)
            Dim columnValuesArray() As Object = New Object() {CINEMA_ID, HALL_ID, AROW, ANUMBER}
            rowSEATRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSEATRow)
            Return rowSEATRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCINEMA_IDHALL_IDAROWANUMBER(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal) As SEATRow
            Return CType(Me.Rows.Find(New Object() {CINEMA_ID, HALL_ID, AROW, ANUMBER}),SEATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SEATDataTable = CType(MyBase.Clone,SEATDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SEATDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCINEMA_ID = MyBase.Columns("CINEMA_ID")
            Me.columnHALL_ID = MyBase.Columns("HALL_ID")
            Me.columnAROW = MyBase.Columns("AROW")
            Me.columnANUMBER = MyBase.Columns("ANUMBER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCINEMA_ID = New Global.System.Data.DataColumn("CINEMA_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCINEMA_ID)
            Me.columnHALL_ID = New Global.System.Data.DataColumn("HALL_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHALL_ID)
            Me.columnAROW = New Global.System.Data.DataColumn("AROW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAROW)
            Me.columnANUMBER = New Global.System.Data.DataColumn("ANUMBER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANUMBER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCINEMA_ID, Me.columnHALL_ID, Me.columnAROW, Me.columnANUMBER}, true))
            Me.columnCINEMA_ID.AllowDBNull = false
            Me.columnHALL_ID.AllowDBNull = false
            Me.columnHALL_ID.MaxLength = 3
            Me.columnAROW.AllowDBNull = false
            Me.columnAROW.MaxLength = 2
            Me.columnANUMBER.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSEATRow() As SEATRow
            Return CType(Me.NewRow,SEATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SEATRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SEATRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SEATRowChangedEvent) Is Nothing) Then
                RaiseEvent SEATRowChanged(Me, New SEATRowChangeEvent(CType(e.Row,SEATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SEATRowChangingEvent) Is Nothing) Then
                RaiseEvent SEATRowChanging(Me, New SEATRowChangeEvent(CType(e.Row,SEATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SEATRowDeletedEvent) Is Nothing) Then
                RaiseEvent SEATRowDeleted(Me, New SEATRowChangeEvent(CType(e.Row,SEATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SEATRowDeletingEvent) Is Nothing) Then
                RaiseEvent SEATRowDeleting(Me, New SEATRowChangeEvent(CType(e.Row,SEATRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSEATRow(ByVal row As SEATRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SEATDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SOTICKETDataTable
        Inherits Global.System.Data.TypedTableBase(Of SOTICKETRow)
        
        Private columnATYPE As Global.System.Data.DataColumn
        
        Private columnSOTICKET_ID As Global.System.Data.DataColumn
        
        Private columnORDER_ID As Global.System.Data.DataColumn
        
        Private columnCINEMA_ID As Global.System.Data.DataColumn
        
        Private columnHALL_ID As Global.System.Data.DataColumn
        
        Private columnAROW As Global.System.Data.DataColumn
        
        Private columnANUMBER As Global.System.Data.DataColumn
        
        Private columnEVENT_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SOTICKET"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ATYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnATYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SOTICKET_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOTICKET_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CINEMA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCINEMA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HALL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHALL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AROWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAROW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ANUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnANUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EVENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEVENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SOTICKETRow
            Get
                Return CType(Me.Rows(index),SOTICKETRow)
            End Get
        End Property
        
        Public Event SOTICKETRowChanging As SOTICKETRowChangeEventHandler
        
        Public Event SOTICKETRowChanged As SOTICKETRowChangeEventHandler
        
        Public Event SOTICKETRowDeleting As SOTICKETRowChangeEventHandler
        
        Public Event SOTICKETRowDeleted As SOTICKETRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSOTICKETRow(ByVal row As SOTICKETRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSOTICKETRow(ByVal ATYPE As String, ByVal SOTICKET_ID As Decimal, ByVal parentAORDERRowByFK_SOTICKET_CONTAINS_AORDER As AORDERRow, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal, ByVal parentEVENTRowByFK_SOTICKET_HAS_EVENT As EVENTRow) As SOTICKETRow
            Dim rowSOTICKETRow As SOTICKETRow = CType(Me.NewRow,SOTICKETRow)
            Dim columnValuesArray() As Object = New Object() {ATYPE, SOTICKET_ID, Nothing, CINEMA_ID, HALL_ID, AROW, ANUMBER, Nothing}
            If (Not (parentAORDERRowByFK_SOTICKET_CONTAINS_AORDER) Is Nothing) Then
                columnValuesArray(2) = parentAORDERRowByFK_SOTICKET_CONTAINS_AORDER(1)
            End If
            If (Not (parentEVENTRowByFK_SOTICKET_HAS_EVENT) Is Nothing) Then
                columnValuesArray(7) = parentEVENTRowByFK_SOTICKET_HAS_EVENT(2)
            End If
            rowSOTICKETRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSOTICKETRow)
            Return rowSOTICKETRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySOTICKET_ID(ByVal SOTICKET_ID As Decimal) As SOTICKETRow
            Return CType(Me.Rows.Find(New Object() {SOTICKET_ID}),SOTICKETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SOTICKETDataTable = CType(MyBase.Clone,SOTICKETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SOTICKETDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnATYPE = MyBase.Columns("ATYPE")
            Me.columnSOTICKET_ID = MyBase.Columns("SOTICKET_ID")
            Me.columnORDER_ID = MyBase.Columns("ORDER_ID")
            Me.columnCINEMA_ID = MyBase.Columns("CINEMA_ID")
            Me.columnHALL_ID = MyBase.Columns("HALL_ID")
            Me.columnAROW = MyBase.Columns("AROW")
            Me.columnANUMBER = MyBase.Columns("ANUMBER")
            Me.columnEVENT_ID = MyBase.Columns("EVENT_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnATYPE = New Global.System.Data.DataColumn("ATYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnATYPE)
            Me.columnSOTICKET_ID = New Global.System.Data.DataColumn("SOTICKET_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOTICKET_ID)
            Me.columnORDER_ID = New Global.System.Data.DataColumn("ORDER_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_ID)
            Me.columnCINEMA_ID = New Global.System.Data.DataColumn("CINEMA_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCINEMA_ID)
            Me.columnHALL_ID = New Global.System.Data.DataColumn("HALL_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHALL_ID)
            Me.columnAROW = New Global.System.Data.DataColumn("AROW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAROW)
            Me.columnANUMBER = New Global.System.Data.DataColumn("ANUMBER", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnANUMBER)
            Me.columnEVENT_ID = New Global.System.Data.DataColumn("EVENT_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEVENT_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSOTICKET_ID}, true))
            Me.columnATYPE.AllowDBNull = false
            Me.columnATYPE.MaxLength = 10
            Me.columnSOTICKET_ID.AllowDBNull = false
            Me.columnSOTICKET_ID.Unique = true
            Me.columnORDER_ID.AllowDBNull = false
            Me.columnCINEMA_ID.AllowDBNull = false
            Me.columnHALL_ID.AllowDBNull = false
            Me.columnHALL_ID.MaxLength = 3
            Me.columnAROW.AllowDBNull = false
            Me.columnAROW.MaxLength = 2
            Me.columnANUMBER.AllowDBNull = false
            Me.columnEVENT_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSOTICKETRow() As SOTICKETRow
            Return CType(Me.NewRow,SOTICKETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SOTICKETRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SOTICKETRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SOTICKETRowChangedEvent) Is Nothing) Then
                RaiseEvent SOTICKETRowChanged(Me, New SOTICKETRowChangeEvent(CType(e.Row,SOTICKETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SOTICKETRowChangingEvent) Is Nothing) Then
                RaiseEvent SOTICKETRowChanging(Me, New SOTICKETRowChangeEvent(CType(e.Row,SOTICKETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SOTICKETRowDeletedEvent) Is Nothing) Then
                RaiseEvent SOTICKETRowDeleted(Me, New SOTICKETRowChangeEvent(CType(e.Row,SOTICKETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SOTICKETRowDeletingEvent) Is Nothing) Then
                RaiseEvent SOTICKETRowDeleting(Me, New SOTICKETRowChangeEvent(CType(e.Row,SOTICKETRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSOTICKETRow(ByVal row As SOTICKETRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetTG = New DataSetTG
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SOTICKETDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AORDERRow
        Inherits Global.System.Data.DataRow
        
        Private tableAORDER As AORDERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAORDER = CType(Me.Table,AORDERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATED() As Date
            Get
                Return CType(Me(Me.tableAORDER.CREATEDColumn),Date)
            End Get
            Set
                Me(Me.tableAORDER.CREATEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_ID() As Decimal
            Get
                Return CType(Me(Me.tableAORDER.ORDER_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableAORDER.ORDER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As String
            Get
                Return CType(Me(Me.tableAORDER.USER_IDColumn),String)
            End Get
            Set
                Me(Me.tableAORDER.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAORDER.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL' in table 'AORDER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAORDER.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUSERRow() As AUSERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AORDER_PLACES_AUSER")),AUSERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AORDER_PLACES_AUSER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tableAORDER.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tableAORDER.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSOTICKETRows() As SOTICKETRow()
            If (Me.Table.ChildRelations("FK_SOTICKET_CONTAINS_AORDER") Is Nothing) Then
                Return New SOTICKETRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SOTICKET_CONTAINS_AORDER")),SOTICKETRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AUSERRow
        Inherits Global.System.Data.DataRow
        
        Private tableAUSER As AUSERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAUSER = CType(Me.Table,AUSERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As String
            Get
                Return CType(Me(Me.tableAUSER.USER_IDColumn),String)
            End Get
            Set
                Me(Me.tableAUSER.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Return CType(Me(Me.tableAUSER.NAMEColumn),String)
            End Get
            Set
                Me(Me.tableAUSER.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SURNAME() As String
            Get
                Return CType(Me(Me.tableAUSER.SURNAMEColumn),String)
            End Get
            Set
                Me(Me.tableAUSER.SURNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMAIL() As String
            Get
                Return CType(Me(Me.tableAUSER.EMAILColumn),String)
            End Get
            Set
                Me(Me.tableAUSER.EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUSER.TELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEL' in table 'AUSER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUSER.TELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADMIN() As String
            Get
                Return CType(Me(Me.tableAUSER.ADMINColumn),String)
            End Get
            Set
                Me(Me.tableAUSER.ADMINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PASSWORD() As Byte()
            Get
                Return CType(Me(Me.tableAUSER.PASSWORDColumn),Byte())
            End Get
            Set
                Me(Me.tableAUSER.PASSWORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTELNull() As Boolean
            Return Me.IsNull(Me.tableAUSER.TELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTELNull()
            Me(Me.tableAUSER.TELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAORDERRows() As AORDERRow()
            If (Me.Table.ChildRelations("FK_AORDER_PLACES_AUSER") Is Nothing) Then
                Return New AORDERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AORDER_PLACES_AUSER")),AORDERRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CINEMARow
        Inherits Global.System.Data.DataRow
        
        Private tableCINEMA As CINEMADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCINEMA = CType(Me.Table,CINEMADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CINEMA_ID() As Decimal
            Get
                Return CType(Me(Me.tableCINEMA.CINEMA_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCINEMA.CINEMA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAME() As String
            Get
                Return CType(Me(Me.tableCINEMA.NAMEColumn),String)
            End Get
            Set
                Me(Me.tableCINEMA.NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CITY() As String
            Get
                Return CType(Me(Me.tableCINEMA.CITYColumn),String)
            End Get
            Set
                Me(Me.tableCINEMA.CITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STREET() As String
            Get
                Return CType(Me(Me.tableCINEMA.STREETColumn),String)
            End Get
            Set
                Me(Me.tableCINEMA.STREETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE_ADULT() As Decimal
            Get
                Return CType(Me(Me.tableCINEMA.PRICE_ADULTColumn),Decimal)
            End Get
            Set
                Me(Me.tableCINEMA.PRICE_ADULTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE_STUDENT() As Decimal
            Get
                Return CType(Me(Me.tableCINEMA.PRICE_STUDENTColumn),Decimal)
            End Get
            Set
                Me(Me.tableCINEMA.PRICE_STUDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE_CHILD() As Decimal
            Get
                Return CType(Me(Me.tableCINEMA.PRICE_CHILDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCINEMA.PRICE_CHILDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetHALLRows() As HALLRow()
            If (Me.Table.ChildRelations("FK_HALL_BELONGS_T_CINEMA") Is Nothing) Then
                Return New HALLRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_HALL_BELONGS_T_CINEMA")),HALLRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EVENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableEVENT As EVENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEVENT = CType(Me.Table,EVENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ADATE() As Date
            Get
                Return CType(Me(Me.tableEVENT.ADATEColumn),Date)
            End Get
            Set
                Me(Me.tableEVENT.ADATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIME() As String
            Get
                Return CType(Me(Me.tableEVENT.TIMEColumn),String)
            End Get
            Set
                Me(Me.tableEVENT.TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EVENT_ID() As Decimal
            Get
                Return CType(Me(Me.tableEVENT.EVENT_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableEVENT.EVENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CINEMA_ID() As Decimal
            Get
                Return CType(Me(Me.tableEVENT.CINEMA_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableEVENT.CINEMA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HALL_ID() As String
            Get
                Return CType(Me(Me.tableEVENT.HALL_IDColumn),String)
            End Get
            Set
                Me(Me.tableEVENT.HALL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVIE_ID() As Decimal
            Get
                Return CType(Me(Me.tableEVENT.MOVIE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableEVENT.MOVIE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVIERow() As MOVIERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EVENT_IS_PLAYED_MOVIE")),MOVIERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EVENT_IS_PLAYED_MOVIE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HALLRowParent() As HALLRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_EVENT_TAKES_PLA_HALL")),HALLRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_EVENT_TAKES_PLA_HALL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSOTICKETRows() As SOTICKETRow()
            If (Me.Table.ChildRelations("FK_SOTICKET_HAS_EVENT") Is Nothing) Then
                Return New SOTICKETRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SOTICKET_HAS_EVENT")),SOTICKETRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HALLRow
        Inherits Global.System.Data.DataRow
        
        Private tableHALL As HALLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHALL = CType(Me.Table,HALLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CINEMA_ID() As Decimal
            Get
                Return CType(Me(Me.tableHALL.CINEMA_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableHALL.CINEMA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HALL_ID() As String
            Get
                Return CType(Me(Me.tableHALL.HALL_IDColumn),String)
            End Get
            Set
                Me(Me.tableHALL.HALL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAPACITY() As Decimal
            Get
                Return CType(Me(Me.tableHALL.CAPACITYColumn),Decimal)
            End Get
            Set
                Me(Me.tableHALL.CAPACITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CINEMARow() As CINEMARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_HALL_BELONGS_T_CINEMA")),CINEMARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_HALL_BELONGS_T_CINEMA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEVENTRows() As EVENTRow()
            If (Me.Table.ChildRelations("FK_EVENT_TAKES_PLA_HALL") Is Nothing) Then
                Return New EVENTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EVENT_TAKES_PLA_HALL")),EVENTRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSEATRows() As SEATRow()
            If (Me.Table.ChildRelations("FK_SEAT_CONSISTS__HALL") Is Nothing) Then
                Return New SEATRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SEAT_CONSISTS__HALL")),SEATRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MOVIERow
        Inherits Global.System.Data.DataRow
        
        Private tableMOVIE As MOVIEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMOVIE = CType(Me.Table,MOVIEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LENGTH() As String
            Get
                Return CType(Me(Me.tableMOVIE.LENGTHColumn),String)
            End Get
            Set
                Me(Me.tableMOVIE.LENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VERSION() As String
            Get
                Return CType(Me(Me.tableMOVIE.VERSIONColumn),String)
            End Get
            Set
                Me(Me.tableMOVIE.VERSIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEAR() As Decimal
            Get
                Return CType(Me(Me.tableMOVIE.YEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableMOVIE.YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVIE_NAME() As String
            Get
                Return CType(Me(Me.tableMOVIE.MOVIE_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableMOVIE.MOVIE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVIE_ID() As Decimal
            Get
                Return CType(Me(Me.tableMOVIE.MOVIE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableMOVIE.MOVIE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PARENTS_GUIDE() As String
            Get
                Return CType(Me(Me.tableMOVIE.PARENTS_GUIDEColumn),String)
            End Get
            Set
                Me(Me.tableMOVIE.PARENTS_GUIDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEVENTRows() As EVENTRow()
            If (Me.Table.ChildRelations("FK_EVENT_IS_PLAYED_MOVIE") Is Nothing) Then
                Return New EVENTRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_EVENT_IS_PLAYED_MOVIE")),EVENTRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SEATRow
        Inherits Global.System.Data.DataRow
        
        Private tableSEAT As SEATDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSEAT = CType(Me.Table,SEATDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CINEMA_ID() As Decimal
            Get
                Return CType(Me(Me.tableSEAT.CINEMA_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSEAT.CINEMA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HALL_ID() As String
            Get
                Return CType(Me(Me.tableSEAT.HALL_IDColumn),String)
            End Get
            Set
                Me(Me.tableSEAT.HALL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AROW() As String
            Get
                Return CType(Me(Me.tableSEAT.AROWColumn),String)
            End Get
            Set
                Me(Me.tableSEAT.AROWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANUMBER() As Decimal
            Get
                Return CType(Me(Me.tableSEAT.ANUMBERColumn),Decimal)
            End Get
            Set
                Me(Me.tableSEAT.ANUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HALLRowParent() As HALLRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SEAT_CONSISTS__HALL")),HALLRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SEAT_CONSISTS__HALL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSOTICKETRows() As SOTICKETRow()
            If (Me.Table.ChildRelations("FK_SOTICKET_ON_SEAT") Is Nothing) Then
                Return New SOTICKETRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SOTICKET_ON_SEAT")),SOTICKETRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SOTICKETRow
        Inherits Global.System.Data.DataRow
        
        Private tableSOTICKET As SOTICKETDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSOTICKET = CType(Me.Table,SOTICKETDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ATYPE() As String
            Get
                Return CType(Me(Me.tableSOTICKET.ATYPEColumn),String)
            End Get
            Set
                Me(Me.tableSOTICKET.ATYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SOTICKET_ID() As Decimal
            Get
                Return CType(Me(Me.tableSOTICKET.SOTICKET_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSOTICKET.SOTICKET_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_ID() As Decimal
            Get
                Return CType(Me(Me.tableSOTICKET.ORDER_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSOTICKET.ORDER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CINEMA_ID() As Decimal
            Get
                Return CType(Me(Me.tableSOTICKET.CINEMA_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSOTICKET.CINEMA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HALL_ID() As String
            Get
                Return CType(Me(Me.tableSOTICKET.HALL_IDColumn),String)
            End Get
            Set
                Me(Me.tableSOTICKET.HALL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AROW() As String
            Get
                Return CType(Me(Me.tableSOTICKET.AROWColumn),String)
            End Get
            Set
                Me(Me.tableSOTICKET.AROWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ANUMBER() As Decimal
            Get
                Return CType(Me(Me.tableSOTICKET.ANUMBERColumn),Decimal)
            End Get
            Set
                Me(Me.tableSOTICKET.ANUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EVENT_ID() As Decimal
            Get
                Return CType(Me(Me.tableSOTICKET.EVENT_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableSOTICKET.EVENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AORDERRow() As AORDERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SOTICKET_CONTAINS_AORDER")),AORDERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SOTICKET_CONTAINS_AORDER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EVENTRow() As EVENTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SOTICKET_HAS_EVENT")),EVENTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SOTICKET_HAS_EVENT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SEATRowParent() As SEATRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SOTICKET_ON_SEAT")),SEATRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_SOTICKET_ON_SEAT"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AORDERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AORDERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AORDERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AORDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AUSERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AUSERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AUSERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AUSERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CINEMARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CINEMARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CINEMARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CINEMARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EVENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EVENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EVENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EVENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HALLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HALLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HALLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HALLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MOVIERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MOVIERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MOVIERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MOVIERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SEATRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SEATRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SEATRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SEATRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SOTICKETRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SOTICKETRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SOTICKETRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SOTICKETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetTGTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AORDERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AORDER"
            tableMapping.ColumnMappings.Add("CREATED", "CREATED")
            tableMapping.ColumnMappings.Add("ORDER_ID", "ORDER_ID")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("TOTAL", "TOTAL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""AORDER"" WHERE ((""CREATED"" = :Original_CREATED) AND (""ORDER_ID"" "& _ 
                "= :Original_ORDER_ID) AND (""USER_ID"" = :Original_USER_ID) AND ((:IsNull_TOTAL = "& _ 
                "1 AND ""TOTAL"" IS NULL) OR (""TOTAL"" = :Original_TOTAL)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CREATED", Global.System.Data.OracleClient.OracleType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, "CREATED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_TOTAL", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_TOTAL", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""AORDER"" (""CREATED"", ""ORDER_ID"", ""USER_ID"", ""TOTAL"") VALUES (:CR"& _ 
                "EATED, :ORDER_ID, :USER_ID, :TOTAL)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CREATED", Global.System.Data.OracleClient.OracleType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, "CREATED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("TOTAL", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""AORDER"" SET ""CREATED"" = :CREATED, ""ORDER_ID"" = :ORDER_ID, ""USER_ID"" "& _ 
                "= :USER_ID, ""TOTAL"" = :TOTAL WHERE ((""CREATED"" = :Original_CREATED) AND (""ORDER_"& _ 
                "ID"" = :Original_ORDER_ID) AND (""USER_ID"" = :Original_USER_ID) AND ((:IsNull_TOTA"& _ 
                "L = 1 AND ""TOTAL"" IS NULL) OR (""TOTAL"" = :Original_TOTAL)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CREATED", Global.System.Data.OracleClient.OracleType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, "CREATED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("TOTAL", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CREATED", Global.System.Data.OracleClient.OracleType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, "CREATED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_TOTAL", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_TOTAL", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CREATED, ORDER_ID, USER_ID, TOTAL FROM VB.AORDER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.AORDERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.AORDERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.AORDERDataTable = New DataSetTG.AORDERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.AORDERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "AORDER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CREATED As Date, ByVal Original_ORDER_ID As Decimal, ByVal Original_USER_ID As String, ByVal Original_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CREATED,Date)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ORDER_ID,Decimal)
            If (Original_USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USER_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_USER_ID,String)
            End If
            If (Original_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CREATED As Date, ByVal ORDER_ID As Decimal, ByVal USER_ID As String, ByVal TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CREATED,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ORDER_ID,Decimal)
            If (USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USER_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(USER_ID,String)
            End If
            If (TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CREATED As Date, ByVal ORDER_ID As Decimal, ByVal USER_ID As String, ByVal TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_CREATED As Date, ByVal Original_ORDER_ID As Decimal, ByVal Original_USER_ID As String, ByVal Original_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CREATED,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ORDER_ID,Decimal)
            If (USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USER_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(USER_ID,String)
            End If
            If (TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CREATED,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ORDER_ID,Decimal)
            If (Original_USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USER_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_USER_ID,String)
            End If
            If (Original_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CREATED As Date, ByVal USER_ID As String, ByVal TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_CREATED As Date, ByVal Original_ORDER_ID As Decimal, ByVal Original_USER_ID As String, ByVal Original_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(CREATED, Original_ORDER_ID, USER_ID, TOTAL, Original_CREATED, Original_ORDER_ID, Original_USER_ID, Original_TOTAL)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AUSERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AUSER"
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("SURNAME", "SURNAME")
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL")
            tableMapping.ColumnMappings.Add("TEL", "TEL")
            tableMapping.ColumnMappings.Add("ADMIN", "ADMIN")
            tableMapping.ColumnMappings.Add("PASSWORD", "PASSWORD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""AUSER"" WHERE ((""USER_ID"" = :Original_USER_ID) AND (""NAME"" = :Or"& _ 
                "iginal_NAME) AND (""SURNAME"" = :Original_SURNAME) AND (""EMAIL"" = :Original_EMAIL)"& _ 
                " AND ((:IsNull_TEL = 1 AND ""TEL"" IS NULL) OR (""TEL"" = :Original_TEL)) AND (""ADMI"& _ 
                "N"" = :Original_ADMIN) AND (""PASSWORD"" = :Original_PASSWORD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_SURNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "SURNAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_EMAIL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "EMAIL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_TEL", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "TEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_TEL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "TEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADMIN", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "ADMIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PASSWORD", Global.System.Data.OracleClient.OracleType.Raw, 0, Global.System.Data.ParameterDirection.Input, "PASSWORD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""AUSER"" (""USER_ID"", ""NAME"", ""SURNAME"", ""EMAIL"", ""TEL"", ""ADMIN"", "& _ 
                """PASSWORD"") VALUES (:USER_ID, :NAME, :SURNAME, :EMAIL, :TEL, :ADMIN, :PASSWORD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("SURNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("EMAIL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "EMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("TEL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "TEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADMIN", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "ADMIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PASSWORD", Global.System.Data.OracleClient.OracleType.Raw, 0, Global.System.Data.ParameterDirection.Input, "PASSWORD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""AUSER"" SET ""USER_ID"" = :USER_ID, ""NAME"" = :NAME, ""SURNAME"" = :SURNAM"& _ 
                "E, ""EMAIL"" = :EMAIL, ""TEL"" = :TEL, ""ADMIN"" = :ADMIN, ""PASSWORD"" = :PASSWORD WHER"& _ 
                "E ((""USER_ID"" = :Original_USER_ID) AND (""NAME"" = :Original_NAME) AND (""SURNAME"" "& _ 
                "= :Original_SURNAME) AND (""EMAIL"" = :Original_EMAIL) AND ((:IsNull_TEL = 1 AND """& _ 
                "TEL"" IS NULL) OR (""TEL"" = :Original_TEL)) AND (""ADMIN"" = :Original_ADMIN) AND ("""& _ 
                "PASSWORD"" = :Original_PASSWORD))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("SURNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "SURNAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("EMAIL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "EMAIL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("TEL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "TEL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADMIN", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "ADMIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PASSWORD", Global.System.Data.OracleClient.OracleType.Raw, 0, Global.System.Data.ParameterDirection.Input, "PASSWORD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_USER_ID", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_SURNAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "SURNAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_EMAIL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "EMAIL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("IsNull_TEL", Global.System.Data.OracleClient.OracleType.Int32, 0, Global.System.Data.ParameterDirection.Input, "TEL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_TEL", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "TEL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADMIN", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "ADMIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PASSWORD", Global.System.Data.OracleClient.OracleType.Raw, 0, Global.System.Data.ParameterDirection.Input, "PASSWORD", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT USER_ID, NAME, SURNAME, EMAIL, TEL, ""ADMIN"", ""PASSWORD"" FROM VB.AUSER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.AUSERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.AUSERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.AUSERDataTable = New DataSetTG.AUSERDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.AUSERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "AUSER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_USER_ID As String, ByVal Original_NAME As String, ByVal Original_SURNAME As String, ByVal Original_EMAIL As String, ByVal Original_TEL As String, ByVal Original_ADMIN As String, ByVal Original_PASSWORD() As Byte) As Integer
            If (Original_USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USER_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_USER_ID,String)
            End If
            If (Original_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NAME,String)
            End If
            If (Original_SURNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SURNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SURNAME,String)
            End If
            If (Original_EMAIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EMAIL")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_EMAIL,String)
            End If
            If (Original_TEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TEL,String)
            End If
            If (Original_ADMIN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADMIN")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ADMIN,String)
            End If
            If (Original_PASSWORD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASSWORD")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PASSWORD,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal USER_ID As String, ByVal NAME As String, ByVal SURNAME As String, ByVal EMAIL As String, ByVal TEL As String, ByVal ADMIN As String, ByVal PASSWORD() As Byte) As Integer
            If (USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USER_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(USER_ID,String)
            End If
            If (NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NAME,String)
            End If
            If (SURNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SURNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SURNAME,String)
            End If
            If (EMAIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMAIL")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(EMAIL,String)
            End If
            If (TEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TEL,String)
            End If
            If (ADMIN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADMIN")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ADMIN,String)
            End If
            If (PASSWORD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASSWORD")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PASSWORD,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal USER_ID As String, ByVal NAME As String, ByVal SURNAME As String, ByVal EMAIL As String, ByVal TEL As String, ByVal ADMIN As String, ByVal PASSWORD() As Byte, ByVal Original_USER_ID As String, ByVal Original_NAME As String, ByVal Original_SURNAME As String, ByVal Original_EMAIL As String, ByVal Original_TEL As String, ByVal Original_ADMIN As String, ByVal Original_PASSWORD() As Byte) As Integer
            If (USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USER_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(USER_ID,String)
            End If
            If (NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NAME,String)
            End If
            If (SURNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SURNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SURNAME,String)
            End If
            If (EMAIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EMAIL")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(EMAIL,String)
            End If
            If (TEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TEL,String)
            End If
            If (ADMIN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ADMIN")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ADMIN,String)
            End If
            If (PASSWORD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PASSWORD")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PASSWORD,Byte())
            End If
            If (Original_USER_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USER_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_USER_ID,String)
            End If
            If (Original_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NAME,String)
            End If
            If (Original_SURNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SURNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SURNAME,String)
            End If
            If (Original_EMAIL Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_EMAIL")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_EMAIL,String)
            End If
            If (Original_TEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TEL,String)
            End If
            If (Original_ADMIN Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ADMIN")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ADMIN,String)
            End If
            If (Original_PASSWORD Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PASSWORD")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PASSWORD,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NAME As String, ByVal SURNAME As String, ByVal EMAIL As String, ByVal TEL As String, ByVal ADMIN As String, ByVal PASSWORD() As Byte, ByVal Original_USER_ID As String, ByVal Original_NAME As String, ByVal Original_SURNAME As String, ByVal Original_EMAIL As String, ByVal Original_TEL As String, ByVal Original_ADMIN As String, ByVal Original_PASSWORD() As Byte) As Integer
            Return Me.Update(Original_USER_ID, NAME, SURNAME, EMAIL, TEL, ADMIN, PASSWORD, Original_USER_ID, Original_NAME, Original_SURNAME, Original_EMAIL, Original_TEL, Original_ADMIN, Original_PASSWORD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CINEMATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CINEMA"
            tableMapping.ColumnMappings.Add("CINEMA_ID", "CINEMA_ID")
            tableMapping.ColumnMappings.Add("NAME", "NAME")
            tableMapping.ColumnMappings.Add("CITY", "CITY")
            tableMapping.ColumnMappings.Add("STREET", "STREET")
            tableMapping.ColumnMappings.Add("PRICE_ADULT", "PRICE_ADULT")
            tableMapping.ColumnMappings.Add("PRICE_STUDENT", "PRICE_STUDENT")
            tableMapping.ColumnMappings.Add("PRICE_CHILD", "PRICE_CHILD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""CINEMA"" WHERE ((""CINEMA_ID"" = :Original_CINEMA_ID) AND (""NAME"" "& _ 
                "= :Original_NAME) AND (""CITY"" = :Original_CITY) AND (""STREET"" = :Original_STREET"& _ 
                ") AND (""PRICE_ADULT"" = :Original_PRICE_ADULT) AND (""PRICE_STUDENT"" = :Original_P"& _ 
                "RICE_STUDENT) AND (""PRICE_CHILD"" = :Original_PRICE_CHILD))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "CITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STREET", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STREET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PRICE_ADULT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_ADULT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PRICE_STUDENT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_STUDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PRICE_CHILD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_CHILD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""CINEMA"" (""CINEMA_ID"", ""NAME"", ""CITY"", ""STREET"", ""PRICE_ADULT"", "& _ 
                """PRICE_STUDENT"", ""PRICE_CHILD"") VALUES (:CINEMA_ID, :NAME, :CITY, :STREET, :PRIC"& _ 
                "E_ADULT, :PRICE_STUDENT, :PRICE_CHILD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "CITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STREET", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STREET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PRICE_ADULT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_ADULT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PRICE_STUDENT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_STUDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PRICE_CHILD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_CHILD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""CINEMA"" SET ""CINEMA_ID"" = :CINEMA_ID, ""NAME"" = :NAME, ""CITY"" = :CITY"& _ 
                ", ""STREET"" = :STREET, ""PRICE_ADULT"" = :PRICE_ADULT, ""PRICE_STUDENT"" = :PRICE_STU"& _ 
                "DENT, ""PRICE_CHILD"" = :PRICE_CHILD WHERE ((""CINEMA_ID"" = :Original_CINEMA_ID) AN"& _ 
                "D (""NAME"" = :Original_NAME) AND (""CITY"" = :Original_CITY) AND (""STREET"" = :Origi"& _ 
                "nal_STREET) AND (""PRICE_ADULT"" = :Original_PRICE_ADULT) AND (""PRICE_STUDENT"" = :"& _ 
                "Original_PRICE_STUDENT) AND (""PRICE_CHILD"" = :Original_PRICE_CHILD))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "CITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("STREET", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STREET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PRICE_ADULT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_ADULT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PRICE_STUDENT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_STUDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PRICE_CHILD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_CHILD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CITY", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "CITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_STREET", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "STREET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PRICE_ADULT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_ADULT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PRICE_STUDENT", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_STUDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PRICE_CHILD", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "PRICE_CHILD", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CINEMA_ID, NAME, CITY, STREET, PRICE_ADULT, PRICE_STUDENT, PRICE_CHILD FRO"& _ 
                "M VB.CINEMA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.CINEMADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.CINEMADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.CINEMADataTable = New DataSetTG.CINEMADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.CINEMADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "CINEMA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CINEMA_ID As Decimal, ByVal Original_NAME As String, ByVal Original_CITY As String, ByVal Original_STREET As String, ByVal Original_PRICE_ADULT As Decimal, ByVal Original_PRICE_STUDENT As Decimal, ByVal Original_PRICE_CHILD As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_NAME,String)
            End If
            If (Original_CITY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CITY")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CITY,String)
            End If
            If (Original_STREET Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STREET")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_STREET,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRICE_ADULT,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PRICE_STUDENT,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRICE_CHILD,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CINEMA_ID As Decimal, ByVal NAME As String, ByVal CITY As String, ByVal STREET As String, ByVal PRICE_ADULT As Decimal, ByVal PRICE_STUDENT As Decimal, ByVal PRICE_CHILD As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CINEMA_ID,Decimal)
            If (NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NAME,String)
            End If
            If (CITY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CITY")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CITY,String)
            End If
            If (STREET Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STREET")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(STREET,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRICE_ADULT,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(PRICE_STUDENT,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(PRICE_CHILD,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CINEMA_ID As Decimal, ByVal NAME As String, ByVal CITY As String, ByVal STREET As String, ByVal PRICE_ADULT As Decimal, ByVal PRICE_STUDENT As Decimal, ByVal PRICE_CHILD As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_NAME As String, ByVal Original_CITY As String, ByVal Original_STREET As String, ByVal Original_PRICE_ADULT As Decimal, ByVal Original_PRICE_STUDENT As Decimal, ByVal Original_PRICE_CHILD As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CINEMA_ID,Decimal)
            If (NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NAME,String)
            End If
            If (CITY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CITY")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CITY,String)
            End If
            If (STREET Is Nothing) Then
                Throw New Global.System.ArgumentNullException("STREET")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(STREET,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRICE_ADULT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PRICE_STUDENT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PRICE_CHILD,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_NAME,String)
            End If
            If (Original_CITY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CITY")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CITY,String)
            End If
            If (Original_STREET Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_STREET")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_STREET,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PRICE_ADULT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PRICE_STUDENT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PRICE_CHILD,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal NAME As String, ByVal CITY As String, ByVal STREET As String, ByVal PRICE_ADULT As Decimal, ByVal PRICE_STUDENT As Decimal, ByVal PRICE_CHILD As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_NAME As String, ByVal Original_CITY As String, ByVal Original_STREET As String, ByVal Original_PRICE_ADULT As Decimal, ByVal Original_PRICE_STUDENT As Decimal, ByVal Original_PRICE_CHILD As Decimal) As Integer
            Return Me.Update(Original_CINEMA_ID, NAME, CITY, STREET, PRICE_ADULT, PRICE_STUDENT, PRICE_CHILD, Original_CINEMA_ID, Original_NAME, Original_CITY, Original_STREET, Original_PRICE_ADULT, Original_PRICE_STUDENT, Original_PRICE_CHILD)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EVENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EVENT"
            tableMapping.ColumnMappings.Add("ADATE", "ADATE")
            tableMapping.ColumnMappings.Add("TIME", "TIME")
            tableMapping.ColumnMappings.Add("EVENT_ID", "EVENT_ID")
            tableMapping.ColumnMappings.Add("CINEMA_ID", "CINEMA_ID")
            tableMapping.ColumnMappings.Add("HALL_ID", "HALL_ID")
            tableMapping.ColumnMappings.Add("MOVIE_ID", "MOVIE_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""EVENT"" WHERE ((""ADATE"" = :Original_ADATE) AND (""TIME"" = :Origin"& _ 
                "al_TIME) AND (""EVENT_ID"" = :Original_EVENT_ID) AND (""CINEMA_ID"" = :Original_CINE"& _ 
                "MA_ID) AND (""HALL_ID"" = :Original_HALL_ID) AND (""MOVIE_ID"" = :Original_MOVIE_ID)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "ADATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_TIME", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "TIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""EVENT"" (""ADATE"", ""TIME"", ""EVENT_ID"", ""CINEMA_ID"", ""HALL_ID"", ""M"& _ 
                "OVIE_ID"") VALUES (:ADATE, :TIME, :EVENT_ID, :CINEMA_ID, :HALL_ID, :MOVIE_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "ADATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("TIME", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "TIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""EVENT"" SET ""ADATE"" = :ADATE, ""TIME"" = :TIME, ""EVENT_ID"" = :EVENT_ID,"& _ 
                " ""CINEMA_ID"" = :CINEMA_ID, ""HALL_ID"" = :HALL_ID, ""MOVIE_ID"" = :MOVIE_ID WHERE (("& _ 
                """ADATE"" = :Original_ADATE) AND (""TIME"" = :Original_TIME) AND (""EVENT_ID"" = :Orig"& _ 
                "inal_EVENT_ID) AND (""CINEMA_ID"" = :Original_CINEMA_ID) AND (""HALL_ID"" = :Origina"& _ 
                "l_HALL_ID) AND (""MOVIE_ID"" = :Original_MOVIE_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ADATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "ADATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("TIME", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "TIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ADATE", Global.System.Data.OracleClient.OracleType.DateTime, 0, Global.System.Data.ParameterDirection.Input, "ADATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_TIME", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "TIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ADATE, ""TIME"", EVENT_ID, CINEMA_ID, HALL_ID, MOVIE_ID FROM VB.EVENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.EVENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.EVENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.EVENTDataTable = New DataSetTG.EVENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.EVENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "EVENT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ADATE As Date, ByVal Original_TIME As String, ByVal Original_EVENT_ID As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_MOVIE_ID As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ADATE,Date)
            If (Original_TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TIME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_EVENT_ID,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_HALL_ID,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MOVIE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ADATE As Date, ByVal TIME As String, ByVal EVENT_ID As Decimal, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal MOVIE_ID As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ADATE,Date)
            If (TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TIME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(EVENT_ID,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HALL_ID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MOVIE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ADATE As Date, ByVal TIME As String, ByVal EVENT_ID As Decimal, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal MOVIE_ID As Decimal, ByVal Original_ADATE As Date, ByVal Original_TIME As String, ByVal Original_EVENT_ID As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_MOVIE_ID As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ADATE,Date)
            If (TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TIME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(EVENT_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(HALL_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MOVIE_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ADATE,Date)
            If (Original_TIME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TIME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_EVENT_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_HALL_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MOVIE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ADATE As Date, ByVal TIME As String, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal MOVIE_ID As Decimal, ByVal Original_ADATE As Date, ByVal Original_TIME As String, ByVal Original_EVENT_ID As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_MOVIE_ID As Decimal) As Integer
            Return Me.Update(ADATE, TIME, Original_EVENT_ID, CINEMA_ID, HALL_ID, MOVIE_ID, Original_ADATE, Original_TIME, Original_EVENT_ID, Original_CINEMA_ID, Original_HALL_ID, Original_MOVIE_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class HALLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "HALL"
            tableMapping.ColumnMappings.Add("CINEMA_ID", "CINEMA_ID")
            tableMapping.ColumnMappings.Add("HALL_ID", "HALL_ID")
            tableMapping.ColumnMappings.Add("CAPACITY", "CAPACITY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""HALL"" WHERE ((""CINEMA_ID"" = :Original_CINEMA_ID) AND (""HALL_ID"""& _ 
                " = :Original_HALL_ID) AND (""CAPACITY"" = :Original_CAPACITY))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CAPACITY", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CAPACITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""HALL"" (""CINEMA_ID"", ""HALL_ID"", ""CAPACITY"") VALUES (:CINEMA_ID, "& _ 
                ":HALL_ID, :CAPACITY)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CAPACITY", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CAPACITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""HALL"" SET ""CINEMA_ID"" = :CINEMA_ID, ""HALL_ID"" = :HALL_ID, ""CAPACITY"""& _ 
                " = :CAPACITY WHERE ((""CINEMA_ID"" = :Original_CINEMA_ID) AND (""HALL_ID"" = :Origin"& _ 
                "al_HALL_ID) AND (""CAPACITY"" = :Original_CAPACITY))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CAPACITY", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CAPACITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CAPACITY", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CAPACITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CINEMA_ID, HALL_ID, CAPACITY FROM VB.HALL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.HALLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.HALLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.HALLDataTable = New DataSetTG.HALLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.HALLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "HALL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_CAPACITY As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_HALL_ID,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CAPACITY,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal CAPACITY As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(HALL_ID,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CAPACITY,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal CAPACITY As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_CAPACITY As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(HALL_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CAPACITY,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_HALL_ID,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_CAPACITY,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CAPACITY As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_CAPACITY As Decimal) As Integer
            Return Me.Update(Original_CINEMA_ID, Original_HALL_ID, CAPACITY, Original_CINEMA_ID, Original_HALL_ID, Original_CAPACITY)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MOVIETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MOVIE"
            tableMapping.ColumnMappings.Add("LENGTH", "LENGTH")
            tableMapping.ColumnMappings.Add("VERSION", "VERSION")
            tableMapping.ColumnMappings.Add("YEAR", "YEAR")
            tableMapping.ColumnMappings.Add("MOVIE_NAME", "MOVIE_NAME")
            tableMapping.ColumnMappings.Add("MOVIE_ID", "MOVIE_ID")
            tableMapping.ColumnMappings.Add("PARENTS_GUIDE", "PARENTS_GUIDE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""MOVIE"" WHERE ((""LENGTH"" = :Original_LENGTH) AND (""VERSION"" = :O"& _ 
                "riginal_VERSION) AND (""YEAR"" = :Original_YEAR) AND (""MOVIE_NAME"" = :Original_MOV"& _ 
                "IE_NAME) AND (""MOVIE_ID"" = :Original_MOVIE_ID) AND (""PARENTS_GUIDE"" = :Original_"& _ 
                "PARENTS_GUIDE))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_LENGTH", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_VERSION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "VERSION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_YEAR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MOVIE_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PARENTS_GUIDE", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "PARENTS_GUIDE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""MOVIE"" (""LENGTH"", ""VERSION"", ""YEAR"", ""MOVIE_NAME"", ""MOVIE_ID"", "& _ 
                """PARENTS_GUIDE"") VALUES (:LENGTH, :VERSION, :YEAR, :MOVIE_NAME, :MOVIE_ID, :PARE"& _ 
                "NTS_GUIDE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("LENGTH", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("VERSION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("YEAR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MOVIE_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PARENTS_GUIDE", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "PARENTS_GUIDE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""MOVIE"" SET ""LENGTH"" = :LENGTH, ""VERSION"" = :VERSION, ""YEAR"" = :YEAR,"& _ 
                " ""MOVIE_NAME"" = :MOVIE_NAME, ""MOVIE_ID"" = :MOVIE_ID, ""PARENTS_GUIDE"" = :PARENTS_"& _ 
                "GUIDE WHERE ((""LENGTH"" = :Original_LENGTH) AND (""VERSION"" = :Original_VERSION) A"& _ 
                "ND (""YEAR"" = :Original_YEAR) AND (""MOVIE_NAME"" = :Original_MOVIE_NAME) AND (""MOV"& _ 
                "IE_ID"" = :Original_MOVIE_ID) AND (""PARENTS_GUIDE"" = :Original_PARENTS_GUIDE))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("LENGTH", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "LENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("VERSION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "VERSION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("YEAR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "YEAR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MOVIE_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("PARENTS_GUIDE", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "PARENTS_GUIDE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_LENGTH", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "LENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_VERSION", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "VERSION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_YEAR", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "YEAR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MOVIE_NAME", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_MOVIE_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "MOVIE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_PARENTS_GUIDE", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "PARENTS_GUIDE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LENGTH, VERSION, YEAR, MOVIE_NAME, MOVIE_ID, PARENTS_GUIDE FROM VB.MOVIE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.MOVIEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.MOVIEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.MOVIEDataTable = New DataSetTG.MOVIEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.MOVIEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "MOVIE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LENGTH As String, ByVal Original_VERSION As String, ByVal Original_YEAR As Decimal, ByVal Original_MOVIE_NAME As String, ByVal Original_MOVIE_ID As Decimal, ByVal Original_PARENTS_GUIDE As String) As Integer
            If (Original_LENGTH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LENGTH")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LENGTH,String)
            End If
            If (Original_VERSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VERSION")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_VERSION,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_YEAR,Decimal)
            If (Original_MOVIE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MOVIE_NAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MOVIE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MOVIE_ID,Decimal)
            If (Original_PARENTS_GUIDE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PARENTS_GUIDE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PARENTS_GUIDE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LENGTH As String, ByVal VERSION As String, ByVal YEAR As Decimal, ByVal MOVIE_NAME As String, ByVal MOVIE_ID As Decimal, ByVal PARENTS_GUIDE As String) As Integer
            If (LENGTH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LENGTH")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LENGTH,String)
            End If
            If (VERSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VERSION")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(VERSION,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(YEAR,Decimal)
            If (MOVIE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MOVIE_NAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MOVIE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(MOVIE_ID,Decimal)
            If (PARENTS_GUIDE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARENTS_GUIDE")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PARENTS_GUIDE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LENGTH As String, ByVal VERSION As String, ByVal YEAR As Decimal, ByVal MOVIE_NAME As String, ByVal MOVIE_ID As Decimal, ByVal PARENTS_GUIDE As String, ByVal Original_LENGTH As String, ByVal Original_VERSION As String, ByVal Original_YEAR As Decimal, ByVal Original_MOVIE_NAME As String, ByVal Original_MOVIE_ID As Decimal, ByVal Original_PARENTS_GUIDE As String) As Integer
            If (LENGTH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LENGTH")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LENGTH,String)
            End If
            If (VERSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VERSION")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(VERSION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(YEAR,Decimal)
            If (MOVIE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MOVIE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MOVIE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MOVIE_ID,Decimal)
            If (PARENTS_GUIDE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PARENTS_GUIDE")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PARENTS_GUIDE,String)
            End If
            If (Original_LENGTH Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LENGTH")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_LENGTH,String)
            End If
            If (Original_VERSION Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VERSION")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_VERSION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_YEAR,Decimal)
            If (Original_MOVIE_NAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MOVIE_NAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MOVIE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_MOVIE_ID,Decimal)
            If (Original_PARENTS_GUIDE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PARENTS_GUIDE")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PARENTS_GUIDE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LENGTH As String, ByVal VERSION As String, ByVal YEAR As Decimal, ByVal MOVIE_NAME As String, ByVal PARENTS_GUIDE As String, ByVal Original_LENGTH As String, ByVal Original_VERSION As String, ByVal Original_YEAR As Decimal, ByVal Original_MOVIE_NAME As String, ByVal Original_MOVIE_ID As Decimal, ByVal Original_PARENTS_GUIDE As String) As Integer
            Return Me.Update(LENGTH, VERSION, YEAR, MOVIE_NAME, Original_MOVIE_ID, PARENTS_GUIDE, Original_LENGTH, Original_VERSION, Original_YEAR, Original_MOVIE_NAME, Original_MOVIE_ID, Original_PARENTS_GUIDE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SEATTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SEAT"
            tableMapping.ColumnMappings.Add("CINEMA_ID", "CINEMA_ID")
            tableMapping.ColumnMappings.Add("HALL_ID", "HALL_ID")
            tableMapping.ColumnMappings.Add("AROW", "AROW")
            tableMapping.ColumnMappings.Add("ANUMBER", "ANUMBER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""SEAT"" WHERE ((""CINEMA_ID"" = :Original_CINEMA_ID) AND (""HALL_ID"""& _ 
                " = :Original_HALL_ID) AND (""AROW"" = :Original_AROW) AND (""ANUMBER"" = :Original_A"& _ 
                "NUMBER))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""SEAT"" (""CINEMA_ID"", ""HALL_ID"", ""AROW"", ""ANUMBER"") VALUES (:CINE"& _ 
                "MA_ID, :HALL_ID, :AROW, :ANUMBER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""SEAT"" SET ""CINEMA_ID"" = :CINEMA_ID, ""HALL_ID"" = :HALL_ID, ""AROW"" = :"& _ 
                "AROW, ""ANUMBER"" = :ANUMBER WHERE ((""CINEMA_ID"" = :Original_CINEMA_ID) AND (""HALL"& _ 
                "_ID"" = :Original_HALL_ID) AND (""AROW"" = :Original_AROW) AND (""ANUMBER"" = :Origin"& _ 
                "al_ANUMBER))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CINEMA_ID, HALL_ID, AROW, ANUMBER FROM VB.SEAT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.SEATDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.SEATDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.SEATDataTable = New DataSetTG.SEATDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.SEATDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "SEAT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_AROW As String, ByVal Original_ANUMBER As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_HALL_ID,String)
            End If
            If (Original_AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AROW")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AROW,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ANUMBER,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(HALL_ID,String)
            End If
            If (AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AROW")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AROW,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ANUMBER,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_AROW As String, ByVal Original_ANUMBER As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(HALL_ID,String)
            End If
            If (AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AROW")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AROW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ANUMBER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_HALL_ID,String)
            End If
            If (Original_AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AROW")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_AROW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ANUMBER,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_AROW As String, ByVal Original_ANUMBER As Decimal) As Integer
            Return Me.Update(Original_CINEMA_ID, Original_HALL_ID, Original_AROW, Original_ANUMBER, Original_CINEMA_ID, Original_HALL_ID, Original_AROW, Original_ANUMBER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SOTICKETTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OracleClient.OracleDataAdapter
        
        Private _connection As Global.System.Data.OracleClient.OracleConnection
        
        Private _transaction As Global.System.Data.OracleClient.OracleTransaction
        
        Private _commandCollection() As Global.System.Data.OracleClient.OracleCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OracleClient.OracleDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.OracleClient.OracleConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OracleClient.OracleCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.OracleClient.OracleTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OracleClient.OracleCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OracleClient.OracleDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SOTICKET"
            tableMapping.ColumnMappings.Add("ATYPE", "ATYPE")
            tableMapping.ColumnMappings.Add("SOTICKET_ID", "SOTICKET_ID")
            tableMapping.ColumnMappings.Add("ORDER_ID", "ORDER_ID")
            tableMapping.ColumnMappings.Add("CINEMA_ID", "CINEMA_ID")
            tableMapping.ColumnMappings.Add("HALL_ID", "HALL_ID")
            tableMapping.ColumnMappings.Add("AROW", "AROW")
            tableMapping.ColumnMappings.Add("ANUMBER", "ANUMBER")
            tableMapping.ColumnMappings.Add("EVENT_ID", "EVENT_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""VB"".""SOTICKET"" WHERE ((""ATYPE"" = :Original_ATYPE) AND (""SOTICKET_ID"""& _ 
                " = :Original_SOTICKET_ID) AND (""ORDER_ID"" = :Original_ORDER_ID) AND (""CINEMA_ID"""& _ 
                " = :Original_CINEMA_ID) AND (""HALL_ID"" = :Original_HALL_ID) AND (""AROW"" = :Origi"& _ 
                "nal_AROW) AND (""ANUMBER"" = :Original_ANUMBER) AND (""EVENT_ID"" = :Original_EVENT_"& _ 
                "ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ATYPE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ATYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_SOTICKET_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "SOTICKET_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""VB"".""SOTICKET"" (""ATYPE"", ""SOTICKET_ID"", ""ORDER_ID"", ""CINEMA_ID"", ""HA"& _ 
                "LL_ID"", ""AROW"", ""ANUMBER"", ""EVENT_ID"") VALUES (:ATYPE, :SOTICKET_ID, :ORDER_ID, "& _ 
                ":CINEMA_ID, :HALL_ID, :AROW, :ANUMBER, :EVENT_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ATYPE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ATYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("SOTICKET_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "SOTICKET_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OracleClient.OracleCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""VB"".""SOTICKET"" SET ""ATYPE"" = :ATYPE, ""SOTICKET_ID"" = :SOTICKET_ID, ""ORDER"& _ 
                "_ID"" = :ORDER_ID, ""CINEMA_ID"" = :CINEMA_ID, ""HALL_ID"" = :HALL_ID, ""AROW"" = :AROW"& _ 
                ", ""ANUMBER"" = :ANUMBER, ""EVENT_ID"" = :EVENT_ID WHERE ((""ATYPE"" = :Original_ATYPE"& _ 
                ") AND (""SOTICKET_ID"" = :Original_SOTICKET_ID) AND (""ORDER_ID"" = :Original_ORDER_"& _ 
                "ID) AND (""CINEMA_ID"" = :Original_CINEMA_ID) AND (""HALL_ID"" = :Original_HALL_ID) "& _ 
                "AND (""AROW"" = :Original_AROW) AND (""ANUMBER"" = :Original_ANUMBER) AND (""EVENT_ID"& _ 
                """ = :Original_EVENT_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ATYPE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ATYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("SOTICKET_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "SOTICKET_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ATYPE", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "ATYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_SOTICKET_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "SOTICKET_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ORDER_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ORDER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_CINEMA_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "CINEMA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_HALL_ID", Global.System.Data.OracleClient.OracleType.[Char], 0, Global.System.Data.ParameterDirection.Input, "HALL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_AROW", Global.System.Data.OracleClient.OracleType.VarChar, 0, Global.System.Data.ParameterDirection.Input, "AROW", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_ANUMBER", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "ANUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OracleClient.OracleParameter("Original_EVENT_ID", Global.System.Data.OracleClient.OracleType.Number, 0, Global.System.Data.ParameterDirection.Input, "EVENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OracleClient.OracleConnection
            Me._connection.ConnectionString = Global.TicketGenerator.My.MySettings.Default.ConnectionStringVB
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OracleClient.OracleCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OracleClient.OracleCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ATYPE, SOTICKET_ID, ORDER_ID, CINEMA_ID, HALL_ID, AROW, ANUMBER, EVENT_ID "& _ 
                "FROM VB.SOTICKET"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetTG.SOTICKETDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetTG.SOTICKETDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetTG.SOTICKETDataTable = New DataSetTG.SOTICKETDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetTG.SOTICKETDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetTG) As Integer
            Return Me.Adapter.Update(dataSet, "SOTICKET")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ATYPE As String, ByVal Original_SOTICKET_ID As Decimal, ByVal Original_ORDER_ID As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_AROW As String, ByVal Original_ANUMBER As Decimal, ByVal Original_EVENT_ID As Decimal) As Integer
            If (Original_ATYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ATYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ATYPE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SOTICKET_ID,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ORDER_ID,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_HALL_ID,String)
            End If
            If (Original_AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AROW")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_AROW,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ANUMBER,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_EVENT_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ATYPE As String, ByVal SOTICKET_ID As Decimal, ByVal ORDER_ID As Decimal, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal, ByVal EVENT_ID As Decimal) As Integer
            If (ATYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ATYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ATYPE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SOTICKET_ID,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(ORDER_ID,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HALL_ID,String)
            End If
            If (AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AROW")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(AROW,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(ANUMBER,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(EVENT_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ATYPE As String,  _
                    ByVal SOTICKET_ID As Decimal,  _
                    ByVal ORDER_ID As Decimal,  _
                    ByVal CINEMA_ID As Decimal,  _
                    ByVal HALL_ID As String,  _
                    ByVal AROW As String,  _
                    ByVal ANUMBER As Decimal,  _
                    ByVal EVENT_ID As Decimal,  _
                    ByVal Original_ATYPE As String,  _
                    ByVal Original_SOTICKET_ID As Decimal,  _
                    ByVal Original_ORDER_ID As Decimal,  _
                    ByVal Original_CINEMA_ID As Decimal,  _
                    ByVal Original_HALL_ID As String,  _
                    ByVal Original_AROW As String,  _
                    ByVal Original_ANUMBER As Decimal,  _
                    ByVal Original_EVENT_ID As Decimal) As Integer
            If (ATYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ATYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ATYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SOTICKET_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ORDER_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CINEMA_ID,Decimal)
            If (HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(HALL_ID,String)
            End If
            If (AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AROW")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(AROW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ANUMBER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(EVENT_ID,Decimal)
            If (Original_ATYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ATYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ATYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SOTICKET_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ORDER_ID,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_CINEMA_ID,Decimal)
            If (Original_HALL_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HALL_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_HALL_ID,String)
            End If
            If (Original_AROW Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AROW")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_AROW,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ANUMBER,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_EVENT_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ATYPE As String, ByVal ORDER_ID As Decimal, ByVal CINEMA_ID As Decimal, ByVal HALL_ID As String, ByVal AROW As String, ByVal ANUMBER As Decimal, ByVal EVENT_ID As Decimal, ByVal Original_ATYPE As String, ByVal Original_SOTICKET_ID As Decimal, ByVal Original_ORDER_ID As Decimal, ByVal Original_CINEMA_ID As Decimal, ByVal Original_HALL_ID As String, ByVal Original_AROW As String, ByVal Original_ANUMBER As Decimal, ByVal Original_EVENT_ID As Decimal) As Integer
            Return Me.Update(ATYPE, Original_SOTICKET_ID, ORDER_ID, CINEMA_ID, HALL_ID, AROW, ANUMBER, EVENT_ID, Original_ATYPE, Original_SOTICKET_ID, Original_ORDER_ID, Original_CINEMA_ID, Original_HALL_ID, Original_AROW, Original_ANUMBER, Original_EVENT_ID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aORDERTableAdapter As AORDERTableAdapter
        
        Private _aUSERTableAdapter As AUSERTableAdapter
        
        Private _cINEMATableAdapter As CINEMATableAdapter
        
        Private _eVENTTableAdapter As EVENTTableAdapter
        
        Private _hALLTableAdapter As HALLTableAdapter
        
        Private _mOVIETableAdapter As MOVIETableAdapter
        
        Private _sEATTableAdapter As SEATTableAdapter
        
        Private _sOTICKETTableAdapter As SOTICKETTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AORDERTableAdapter() As AORDERTableAdapter
            Get
                Return Me._aORDERTableAdapter
            End Get
            Set
                Me._aORDERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AUSERTableAdapter() As AUSERTableAdapter
            Get
                Return Me._aUSERTableAdapter
            End Get
            Set
                Me._aUSERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CINEMATableAdapter() As CINEMATableAdapter
            Get
                Return Me._cINEMATableAdapter
            End Get
            Set
                Me._cINEMATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EVENTTableAdapter() As EVENTTableAdapter
            Get
                Return Me._eVENTTableAdapter
            End Get
            Set
                Me._eVENTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property HALLTableAdapter() As HALLTableAdapter
            Get
                Return Me._hALLTableAdapter
            End Get
            Set
                Me._hALLTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MOVIETableAdapter() As MOVIETableAdapter
            Get
                Return Me._mOVIETableAdapter
            End Get
            Set
                Me._mOVIETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SEATTableAdapter() As SEATTableAdapter
            Get
                Return Me._sEATTableAdapter
            End Get
            Set
                Me._sEATTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SOTICKETTableAdapter() As SOTICKETTableAdapter
            Get
                Return Me._sOTICKETTableAdapter
            End Get
            Set
                Me._sOTICKETTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aORDERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aORDERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aORDERTableAdapter.Connection
                End If
                If ((Not (Me._aUSERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aUSERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aUSERTableAdapter.Connection
                End If
                If ((Not (Me._cINEMATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cINEMATableAdapter.Connection) Is Nothing)) Then
                    Return Me._cINEMATableAdapter.Connection
                End If
                If ((Not (Me._eVENTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eVENTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eVENTTableAdapter.Connection
                End If
                If ((Not (Me._hALLTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._hALLTableAdapter.Connection) Is Nothing)) Then
                    Return Me._hALLTableAdapter.Connection
                End If
                If ((Not (Me._mOVIETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mOVIETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mOVIETableAdapter.Connection
                End If
                If ((Not (Me._sEATTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sEATTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sEATTableAdapter.Connection
                End If
                If ((Not (Me._sOTICKETTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sOTICKETTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sOTICKETTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aORDERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aUSERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cINEMATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eVENTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._hALLTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mOVIETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sEATTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sOTICKETTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetTG, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cINEMATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CINEMA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cINEMATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mOVIETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MOVIE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mOVIETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._hALLTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.HALL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._hALLTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aUSERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AUSER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aUSERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sEATTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SEAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sEATTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aORDERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AORDER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aORDERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eVENTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._EVENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eVENTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sOTICKETTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SOTICKET.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sOTICKETTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetTG, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cINEMATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CINEMA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cINEMATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mOVIETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MOVIE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mOVIETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._hALLTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.HALL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._hALLTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aUSERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AUSER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aUSERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sEATTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SEAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sEATTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aORDERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AORDER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aORDERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eVENTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._EVENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eVENTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sOTICKETTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SOTICKET.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sOTICKETTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetTG, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sOTICKETTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SOTICKET.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sOTICKETTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eVENTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._EVENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eVENTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aORDERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AORDER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aORDERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sEATTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SEAT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sEATTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aUSERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AUSER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aUSERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._hALLTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.HALL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._hALLTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mOVIETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MOVIE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mOVIETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cINEMATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CINEMA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cINEMATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetTG) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aORDERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aORDERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aUSERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aUSERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cINEMATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cINEMATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eVENTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eVENTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._hALLTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._hALLTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mOVIETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mOVIETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sEATTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sEATTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sOTICKETTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sOTICKETTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aORDERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aORDERTableAdapter, Me._aORDERTableAdapter.Connection)
                    Me._aORDERTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._aORDERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._aORDERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aORDERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aORDERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aUSERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aUSERTableAdapter, Me._aUSERTableAdapter.Connection)
                    Me._aUSERTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._aUSERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._aUSERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aUSERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aUSERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cINEMATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cINEMATableAdapter, Me._cINEMATableAdapter.Connection)
                    Me._cINEMATableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._cINEMATableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._cINEMATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cINEMATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cINEMATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eVENTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eVENTTableAdapter, Me._eVENTTableAdapter.Connection)
                    Me._eVENTTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._eVENTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._eVENTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eVENTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eVENTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._hALLTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._hALLTableAdapter, Me._hALLTableAdapter.Connection)
                    Me._hALLTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._hALLTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._hALLTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._hALLTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._hALLTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mOVIETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mOVIETableAdapter, Me._mOVIETableAdapter.Connection)
                    Me._mOVIETableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._mOVIETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._mOVIETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mOVIETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mOVIETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sEATTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sEATTableAdapter, Me._sEATTableAdapter.Connection)
                    Me._sEATTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sEATTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sEATTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sEATTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sEATTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sOTICKETTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sOTICKETTableAdapter, Me._sOTICKETTableAdapter.Connection)
                    Me._sOTICKETTableAdapter.Connection = CType(workConnection,Global.System.Data.OracleClient.OracleConnection)
                    Me._sOTICKETTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OracleClient.OracleTransaction)
                    If Me._sOTICKETTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sOTICKETTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sOTICKETTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aORDERTableAdapter) Is Nothing) Then
                    Me._aORDERTableAdapter.Connection = CType(revertConnections(Me._aORDERTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._aORDERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aUSERTableAdapter) Is Nothing) Then
                    Me._aUSERTableAdapter.Connection = CType(revertConnections(Me._aUSERTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._aUSERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cINEMATableAdapter) Is Nothing) Then
                    Me._cINEMATableAdapter.Connection = CType(revertConnections(Me._cINEMATableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._cINEMATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eVENTTableAdapter) Is Nothing) Then
                    Me._eVENTTableAdapter.Connection = CType(revertConnections(Me._eVENTTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._eVENTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._hALLTableAdapter) Is Nothing) Then
                    Me._hALLTableAdapter.Connection = CType(revertConnections(Me._hALLTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._hALLTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mOVIETableAdapter) Is Nothing) Then
                    Me._mOVIETableAdapter.Connection = CType(revertConnections(Me._mOVIETableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._mOVIETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sEATTableAdapter) Is Nothing) Then
                    Me._sEATTableAdapter.Connection = CType(revertConnections(Me._sEATTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sEATTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sOTICKETTableAdapter) Is Nothing) Then
                    Me._sOTICKETTableAdapter.Connection = CType(revertConnections(Me._sOTICKETTableAdapter),Global.System.Data.OracleClient.OracleConnection)
                    Me._sOTICKETTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
